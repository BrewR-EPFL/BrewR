name: BrewR APK

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'

      # Step 3: Cache Gradle dependencies
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Step 4: Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          api-level: 34
          build-tools: "34.0.0"
          ndk: "25.1.8937393"

      # Step 5: Decode and place google-services.json
      - name: Decode google-services.json
        env:
          GOOGLE_SERVICES_JSON: ${{ secrets.GOOGLE_SERVICES_JSON }}
        run: |
          echo "$GOOGLE_SERVICES_JSON" | base64 --decode > ./app/google-services.json

      # Step 6: Place MAPS API Key in local.properties
      - name: Add MAPS API Key to local.properties
        env:
          MAPS_API_KEY: ${{ secrets.MAPS_API_KEY }}
        run: |
          echo "MAPS_API_KEY=${MAPS_API_KEY}" > ./local.properties

      # Step 7: Decode the persistent release keystore from secrets
      - name: Decode Release Keystore
        env:
          RELEASE_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}
        run: |
          mkdir -p /home/runner/work/keystore
          echo "$RELEASE_KEYSTORE" | base64 --decode > /home/runner/work/keystore/release.keystore

      # Step 8: Grant execute permissions to Gradle Wrapper
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Step 9: Build the signed release APK
      - name: Build Signed APK for Release
        env:
          KEYSTORE_PATH: /home/runner/work/keystore/release.keystore
          KS_PW: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PW: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=$KEYSTORE_PATH \
            -Pandroid.injected.signing.store.password=$KS_PW \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PW

      # Step 10: Extract SHA-1 Fingerprint of the Keystore
      - name: Extract Keystore SHA-1 Fingerprint
        run: |
          keytool -list -v -keystore /home/runner/work/keystore/release.keystore \
          -alias ${{ secrets.KEY_ALIAS }} -storepass ${{ secrets.KEYSTORE_PASSWORD }} | grep 'SHA1'

      # Step 11: List Generated APKs
      - name: List Generated APK Files
        run: find app/build/outputs/apk -type f

      # Step 12: Upload APK to GitHub Artifacts
      - name: Upload Signed APK
        uses: actions/upload-artifact@v3
        with:
          name: BrewR-Signed-APK
          path: app/build/outputs/apk/release/app-release.apk
